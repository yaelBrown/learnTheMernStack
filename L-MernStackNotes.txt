Learn Mern Stack notes. 
https://www.youtube.com/watch?v=5yTazHkDR4o&list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iE&index=2


npm init
  entry point: server.js (for fullstack apps)

npm install express body-parser mongoose concurrently
  concurrently - lets you run the server and client at the same time
  body-parser - lets you take GET requests and access database
  mongoose - Is JS Database ORM (object-relational mapping) framework
  express - Allows you to run server in node for productivity. 

  nodemon - (like live-server) automattically updates the server when you make changes

add scripts to package.json (after test script)
  "start": "node server.js",          // starts production node server
  "server": "live-server"             // starts developement server

create server.js 

Backend
  Get mongoDB URI (uniform resource identifier) (can use local db instead)
    mlab.com
      create account or login
      create new
        aws cloud provider
        sandbox
        us east
        [name the project]
        summary (hit continue)
      create a user for database
      copy the mongodb uri
    
    create /config/keys.js file
      add a module exports with the db uri address

    import the export into your server.js file

    add the heroku commands (they are in server.js)

    test server
      npm run server 
        it should bring up a indexof page because there is no index.html file. 

  Create schema
    Create models folder
      create items.js
        schema info - https://mongoosejs.com/docs/schematypes.html
        export the items 

  Create routes
    create /routes/api/items.js file (and associative folders)
      add require into server.js file
        add routes
          The middleware of routes is to get information from database with moongoose and add to your application. 
        GET POST and DELETE

create client folder
  run create-react-app . (install react into client folder)
    create a "proxy" entry in /client/package.json to local host after the scripts part ( "proxy": "http://localhost:5000" )
  
  verify concurrently is installed on the server (look at server package.json)

  add scripts commands to package.json
    "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server\" \"npm run client\""
    "client-install": "npm install -- prefix client",

  will have to run server and client seperately while continuing to develope.   
    Concurrently sucks.